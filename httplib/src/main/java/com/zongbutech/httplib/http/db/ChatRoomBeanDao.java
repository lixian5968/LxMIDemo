package com.zongbutech.httplib.http.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zongbutech.httplib.http.db.ChatRoomBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_ROOM_BEAN".
*/
public class ChatRoomBeanDao extends AbstractDao<ChatRoomBean, Long> {

    public static final String TABLENAME = "CHAT_ROOM_BEAN";

    /**
     * Properties of entity HttpChatRoomBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreatedAt = new Property(1, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property CreatorId = new Property(2, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property IconURL = new Property(3, String.class, "iconURL", false, "ICON_URL");
        public final static Property MaxUser = new Property(4, Integer.class, "maxUser", false, "MAX_USER");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property NimRoomId = new Property(6, String.class, "nimRoomId", false, "NIM_ROOM_ID");
        public final static Property OwnerId = new Property(7, String.class, "ownerId", false, "OWNER_ID");
        public final static Property Priority = new Property(8, Integer.class, "priority", false, "PRIORITY");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property UpdatedAt = new Property(10, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ChatRoomBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRoomBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_ROOM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CREATED_AT\" INTEGER," + // 1: createdAt
                "\"CREATOR_ID\" TEXT," + // 2: creatorId
                "\"ICON_URL\" TEXT," + // 3: iconURL
                "\"MAX_USER\" INTEGER," + // 4: maxUser
                "\"NAME\" TEXT," + // 5: name
                "\"NIM_ROOM_ID\" TEXT," + // 6: nimRoomId
                "\"OWNER_ID\" TEXT," + // 7: ownerId
                "\"PRIORITY\" INTEGER," + // 8: priority
                "\"STATUS\" INTEGER," + // 9: status
                "\"UPDATED_AT\" INTEGER);"); // 10: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_ROOM_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatRoomBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(2, createdAt.getTime());
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(3, creatorId);
        }
 
        String iconURL = entity.getIconURL();
        if (iconURL != null) {
            stmt.bindString(4, iconURL);
        }
 
        Integer maxUser = entity.getMaxUser();
        if (maxUser != null) {
            stmt.bindLong(5, maxUser);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String nimRoomId = entity.getNimRoomId();
        if (nimRoomId != null) {
            stmt.bindString(7, nimRoomId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(8, ownerId);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(9, priority);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(11, updatedAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatRoomBean readEntity(Cursor cursor, int offset) {
        ChatRoomBean entity = new ChatRoomBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creatorId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // iconURL
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // maxUser
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nimRoomId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ownerId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // priority
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatRoomBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setCreatorId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIconURL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaxUser(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNimRoomId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOwnerId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPriority(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUpdatedAt(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatRoomBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatRoomBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
